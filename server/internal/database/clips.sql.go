// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clips.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createClip = `-- name: CreateClip :one
INSERT INTO clips (id, content, user_id, created_at, updated_at)
VALUES (
    GEN_RANDOM_UUID(),
    $1,
    $2,
    NOW(),
    NOW()
)
RETURNING id, content, user_id, created_at, updated_at
`

type CreateClipParams struct {
	Content string
	UserID  uuid.UUID
}

func (q *Queries) CreateClip(ctx context.Context, arg CreateClipParams) (Clip, error) {
	row := q.db.QueryRowContext(ctx, createClip, arg.Content, arg.UserID)
	var i Clip
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOldestClip = `-- name: DeleteOldestClip :exec
DELETE FROM clips WHERE id IN (
    SELECT id, content, user_id, created_at, updated_at FROM clips c
    WHERE c.user_id=$1
    ORDER BY created_at ASC
    LIMIT 1
)
`

func (q *Queries) DeleteOldestClip(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOldestClip, userID)
	return err
}

const getClipsByUser = `-- name: GetClipsByUser :many
SELECT id, content, user_id, created_at, updated_at FROM clips
WHERE user_id=$1
ORDER BY created_at DESC
`

func (q *Queries) GetClipsByUser(ctx context.Context, userID uuid.UUID) ([]Clip, error) {
	rows, err := q.db.QueryContext(ctx, getClipsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Clip
	for rows.Next() {
		var i Clip
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMostRecentClip = `-- name: GetMostRecentClip :one
SELECT id, content, user_id, created_at, updated_at FROM clips
WHERE id IN (
    SELECT id, content, user_id, created_at, updated_at FROM clips c
    WHERE c.user_id=$1
    ORDER BY created_at DESC
    LIMIT 1
)
`

func (q *Queries) GetMostRecentClip(ctx context.Context, userID uuid.UUID) (Clip, error) {
	row := q.db.QueryRowContext(ctx, getMostRecentClip, userID)
	var i Clip
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
